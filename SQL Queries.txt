------------------------------------SQL 1------------------------------------
1) SELECT * FROM EMP;  //to select whole table.
2) SELECT ENAME,JOB,MGR FROM EMP; //FOR PARTICULAR ATTRIBUTES.
3) SELECT ENAME,SAL,SAL*12 FROM EMP;
4) SELECT ENAME,SAL,SAL*2/100 "TAX" FROM EMP;
   SELECT ENAME,SAL,SAL*2/100 TAX FROM EMP;       //SAME
   SELECT ENAME,SAL,SAL*2/100 AS "TAX" FROM EMP;  //SAME
5) SELECT EMPNO,ENAME,JOB,SAL,SAL*12 "ANNUAL SAL" FROM EMP;
   SELECT EMPNO,ENAME,JOB,SAL,SAL*12 AS "ANNUAL SAL" FROM EMP;  //SAME
6) SELECT DISTINCT JOB FROM EMP;  //FOR REPEATING VALUES TO DISPLAY ONCE.
7) SELECT ENAME,JOB,SAL,COMM,SAL+NVL(COMM,0) "TOTAL SAL" FROM EMP;  //NVL FUNC
8) SELECT ENAME||'''s job is '||JOB "Employee Details" FROM EMP; //concatination operator.
9) SELECT ENAME||JOB AS "EMPLOYEE" FROM EMP;
10)SELECT ENAME||' IS A '||JOB AS "EMPLOYEES" FROM EMP;

------------------------------------SQL 2------------------------------------
//WHERE (conditions),BETWEEN AND,IN,LIKE,IS NULL,ORDER BY
1) SELECT * FROM EMP WHERE DEPTNO = 10;  //FOR PARTICULAR VALUES RESTRICTION
2) SELECT * FROM EMP WHERE JOB='CLERK';  //'FOR STRING LITERAL OR CHARACTER STRING'
3) SELECT EMPNO,ENAME,JOB,SAL FROM EMP WHERE (JOB='PRESIDENT' OR JOB='SALESMAN') AND SAL>=1500;
   SELECT EMPNO,ENAME,JOB,SAL FROM EMP WHERE JOB='PRESIDENT' AND SAL>=1500 OR JOB='SALESMAN' AND SAL>=1500;
4) SELECT EMPNO,ENAME,SAL FROM EMP WHERE SAL BETWEEN 1000 AND 1500; //LOWER-UPPER
   SELECT EMPNO,ENAME,SAL FROM EMP WHERE SAL>=1000 AND SAL<=1500;   //same as above
5) SELECT EMPNO,ENAME,SAL,MGR FROM EMP WHERE MGR IN(7902,7566,7788);
6) SELECT EMPNO,ENAME,SAL,MGR FROM EMP WHERE MGR NOT IN(7902,7566,7788);
7) SELECT EMPNO,ENAME,SAL FROM EMP WHERE ENAME LIKE 'S%';    //% DENOTES ZERO OR MANY CHARACTERS
   SELECT EMPNO,ENAME,SAL FROM EMP WHERE ENAME LIKE '%S'; 
   SELECT EMPNO,ENAME,SAL FROM EMP WHERE ENAME LIKE '%S%';   //NAME HAVING S IN IT
   SELECT EMPNO,ENAME,SAL FROM EMP WHERE ENAME LIKE '__A%';
   SELECT EMPNO,ENAME,SAL FROM EMP WHERE ENAME LIKE '_A%';   //_ DENOTES ONE CHARACTER
   SELECT EMPNO,ENAME,SAL FROM EMP WHERE ENAME NOT LIKE '_A%';
   SELECT * FROM EMP WHERE HIREDATE LIKE '_1%';
8) SELECT EMPNO,ENAME,MGR FROM EMP WHERE MGR IS NULL;
   SELECT EMPNO,ENAME,MGR FROM EMP WHERE MGR IS NOT NULL;
   SELECT EMPNO,ENAME,COMM FROM EMP WHERE COMM IS NULL;
   SELECT EMPNO,ENAME,COMM FROM EMP WHERE COMM IS NOT NULL;
9) SELECT ENAME,JOB,DEPTNO,HIREDATE FROM EMP ORDER BY HIREDATE;           //ASC BY DEFAULT
   SELECT ENAME,JOB,DEPTNO,HIREDATE FROM EMP ORDER BY HIREDATE DESC;      //DESC ORDER
   SELECT EMPNO,ENAME,JOB,SAL,SAL*12 ANNSAL FROM EMP ORDER BY ANNSAL;
   SELECT EMPNO,ENAME,JOB,SAL,SAL*12 ANNSAL FROM EMP ORDER BY ANNSAL DESC;
   SELECT EMPNO,ENAME,DEPTNO,SAL FROM EMP ORDER BY DEPTNO,SAL DESC;
   SELECT EMPNO,ENAME,DEPTNO,SAL FROM EMP ORDER BY 3;
   SELECT EMPNO,ENAME,DEPTNO,SAL FROM EMP ORDER BY 2,3;
   SELECT EMPNO,ENAME,DEPTNO,SAL FROM EMP ORDER BY 2,3 DESC;
   SELECT EMPNO,ENAME,DEPTNO,SAL FROM EMP ORDER BY 2 DESC;

------------------------------------SQL 3------------------------------------
LOWER('ABC')
UPPER('ABC')
INITCAP('ABC')
CONCAT('A','B')
SUBSTR('ABC',2,2)
LENGTH('ABCDEF')
LPAD('ABC',4,'*')
RPAD('ABC',4,'*')
LTRIM('****ABC','*')
RTRIM('ABC****','*')
REPLACE('ARIF','R','S')
ROUND(45.926,0)
TRUNC(45.926,0)
MOD(1600, 300)
SQRT(64)
POWER(2,3)
LOG(10,100)=2
ABS(-45.45456)
CEIL(-3.456)
FLOOR(-3.456)
SIGN(-45.926)=1
EXP(1)
SIN(60)
ASIN(0.3)
SINH(60)
TO_DATE('12/12/2000')  //WHEN +- OPERATIONS
TO_DATE('February 22, 1981','MM/DD/YYYY')
MONTHS_BETWEEN('10/22/2020','01/22/2020')
ADD_MONTHS('01/11/1994',6)
NEXT_DAY('01/11/1994','FRIDAY')
LAST_DAY('10/22/2020')
ROUND(SYSDATE,'MONTH')
ROUND(SYSDATE,'YEAR')
TRUNC(SYSDATE,'MONTH')
TRUNC(SYSDATE,'YEAR')

1) SELECT LOWER('SQL COURSE') LOWER FROM DUAL;
   SELECT UPPER('SQL COURSE') UPPER FROM DUAL;
   SELECT INITCAP('SQL COURSE') INITCAP FROM DUAL;
   SELECT EMPNO,ENAME,DEPTNO FROM EMP WHERE UPPER(ENAME)='BLAKE';  //BLAKE should be capital.
   OR
   SELECT EMPNO,ENAME,DEPTNO FROM EMP WHERE LOWER(ENAME)='blake';
2) SELECT 'The job title for '||INITCAP(ENAME)||' is '||LOWER(JOB) "EMPLOYEE DETAILS" FROM EMP;
3) SELECT EMPNO,INITCAP(ENAME) ENAME,DEPTNO FROM EMP;
4) SELECT CONCAT('I Love ', 'PUCIT') CONCATINATE FROM DUAL;  //I LOVE PUCIT ONLY FOR TWO ARGUMENTS.  
5) SELECT SUBSTR('PUCIT',1,3) SUBSTRING FROM DUAL;           //PUC
6) SELECT SUBSTR('PUCIT',3) SUBSTRING FROM DUAL;             //CIT
7) SELECT SUBSTR('PUCIT',-4,2) SUBSTRING FROM DUAL;          //UC
8) SELECT LENGTH('I LOVE PUCIT') LENGTH FROM DUAL;           //12
9) SELECT INSTR('HASSAN', 'S') "STRING POSITION" FROM DUAL;  //3
   SELECT INSTR('HASSAN', 'R') "STRING POSITION" FROM DUAL;  //0
10)SELECT LPAD(sal,10,'*') "LEFT PADDING" FROM EMP;          //******5000
11)SELECT RPAD(sal,10,'*') "RIGHT PADDING" FROM EMP;         //5000******
12)SELECT LTRIM('***ABC','*') "LEFT TRIMMING" FROM DUAL;     //ABC
13)SELECT RTRIM('ABC***','*') "RIGHT TRIMMING" FROM DUAL;    //ABC
14)SELECT REPLACE('ARIF','R','S') "REPLACING CHAR OR WORD" FROM DUAL; //ASIF 
15)SELECT ENAME, CONCAT(ENAME,JOB), LENGTH(ENAME), INSTR(ENAME,'A') FROM EMP WHERE SUBSTR(JOB,1,5) = 'SALES';
16)SELECT ENAME, CONCAT(ENAME,JOB), LENGTH(ENAME), INSTR(ENAME,'A') FROM EMP WHERE SUBSTR(ENAME,-1,1) = 'N';
17)SELECT ROUND(45.926,2) ROUNDED FROM DUAL;        //45.93
18)SELECT ROUND(45.923,2) ROUNDED FROM DUAL;        //45.92
19)SELECT ROUND(45.926,0) ROUNDED FROM DUAL;        //46 or use ROUND(45.926)
20)SELECT ROUND(45.926,-1) ROUNDED FROM DUAL;       //50
21)SELECT ROUND(45.926,-2) ROUNDED FROM DUAL;       //0
   SELECT ROUND(45.923,2),                          //45.92
          ROUND(45.923,0),                          //46  OR ROUND(45.923)
          ROUND(45.923,-1) FROM DUAL;               //50
22)SELECT TRUNC(45.923,2) TRUNCATED FROM DUAL;      //45.92
23)SELECT TRUNC(45.923) TRUNCATED FROM DUAL;        //45 or use TRUNC(45.923,0)
24)SELECT TRUNC(45.923,-1) TRUNCATED FROM DUAL;     //40
25)SELECT TRUNC(45.923,-2) TRUNCATED FROM DUAL;     //0
   SELECT TRUNC(45.923,2),                          //45.92
          TRUNC(45.923),                            //45
          TRUNC(45.923,-1) FROM   DUAL;             //40
26)SELECT MOD(1600, 300) MOD FROM DUAL;             //100
   SELECT ENAME,SAL,COMM,MOD(SAL,COMM) MOD FROM EMP WHERE JOB='SALESMAN';
   SELECT ENAME,SAL,COMM,MOD(SAL,NVL(COMM,0)) MOD FROM EMP;
27)SELECT SQRT(64) "SQUARE ROOT" FROM DUAL;         //8
   SELECT SQRT(16) FROM DUAL;                       //4
28)SELECT ROUND(SQRT(50),3) "SQUARE ROOT" FROM DUAL;//7.071
29)SELECT POWER(2,3) POWER FROM DUAL;               //8
30)SELECT ABS(45.45456) "ABSOLUTE VALUE" FROM DUAL; //45.45456  ABSOLUTE
31)SELECT ABS(-45.45456) "ABSOLUTE VALUE" FROM DUAL;//45.45456  ABSOLUTE
   SELECT ABS(-87) "ABSOLUTE VALUE" from dual;      //87 
32)SELECT CEIL(45.926) CEIL FROM DUAL;              //46
   SELECT CEIL(3.456) CEIL FROM DUAL;               //4
   SELECT CEIL(3) CEIL FROM DUAL;                   //3
   SELECT CEIL(-3.456) CEIL FROM DUAL;              //-3
   SELECT CEIL(-3) CEIL FROM DUAL;                  //-3
33)SELECT FLOOR(45.926) FLOOR FROM DUAL;            //45
   SELECT FLOOR(3.456) FLOOR FROM DUAL;             //3
   SELECT FLOOR(3) FLOOR FROM DUAL;                 //3
   SELECT FLOOR(-3.456) FLOOR FROM DUAL;            //-4
   SELECT FLOOR(-3) FLOOR FROM DUAL;                //-3
34)SELECT SIGN(45.926) SIGN FROM DUAL;              //1
35)SELECT SIGN(-45.926) SIGN FROM DUAL;             //-1
36)SELECT SIGN(0) SIGN FROM DUAL;                   //0
37)SELECT EXP(1) EXPONENTIAL FROM DUAL;             //e^1=2.7182818.....
38)SELECT EXP(10) EXPONENTIAL FROM DUAL;            //22026.4657948.....
39)SELECT LOG(10,100) LOGRITHM FROM DUAL;           //2 WITH (BASE,VALUE)
40)SELECT LN(10) "NATURAL LOG" FROM DUAL;           //2.30258509299.....
41)SELECT SIN(60) SINE FROM DUAL;                   //0.86602540378.....
42)SELECT COS(60) COSINE FROM DUAL;                 //0.5
43)SELECT TAN(60) TANGENT FROM DUAL;                //1.73205080756.....
44)SELECT SINH(60) "HYPERBOLIC SINE" FROM DUAL;     //57,100,369,490,784,214,183,147,859.157238
45)SELECT COSH(60) "HYPERBOLIC COSINE" FROM DUAL;   //57,100,369,490,784,214,183,147,859.157238
46)SELECT TANH(60) "HYPERBOLIC TANGENT" FROM DUAL;  //1
47)SELECT ASIN(0.3) "ARC SINE" FROM DUAL;           //0.30469265401.....
48)SELECT ACOS(0.3) "ARC COSINE" FROM DUAL;         //1.26610367277.....
49)SELECT ATAN(0.3) "ARC TANGENT" FROM DUAL;        //0.29145679447.....   
50)SELECT SYSDATE FROM DUAL;                        //10/22/2020
51)SELECT ENAME, SYSDATE-HIREDATE DAYS FROM EMP WHERE DEPTNO=10;
   SELECT ENAME, (SYSDATE-HIREDATE)/7 WEEKS FROM EMP WHERE DEPTNO=10;
   SELECT ENAME, (SYSDATE-HIREDATE)/30 MONTHS FROM EMP WHERE DEPTNO=10;
   SELECT ENAME, (SYSDATE-HIREDATE)/365 YEARS FROM EMP WHERE DEPTNO=10;
52)SELECT HIREDATE, HIREDATE-7 SUBTRACTED FROM EMP;  //DAYS SUBTRACTED
53)SELECT HIREDATE, HIREDATE+7 ADDED FROM EMP;       //DAYS ADDED
54)SELECT SYSDATE+40/24 "ADDING HOURS" FROM DUAL;
55)SELECT SYSDATE-HIREDATE AS "Total days" FROM EMP;
   SELECT ROUND((SYSDATE-TO_DATE('12/12/2000'))/365) AS "My Age" FROM DUAL;    //20
56)SELECT MONTHS_BETWEEN('10/22/2020','01/22/2020') FROM DUAL;     //9
57)SELECT ADD_MONTHS('01/11/1994',6) "MONTHS ADDED" FROM DUAL;     //07/11/1994
58)SELECT NEXT_DAY('01/11/1994','FRIDAY') "NEXT FRIDAY" FROM DUAL; //01/14/1994
59)SELECT NEXT_DAY('10/22/2020','FRIDAY') "NEXT FRIDAY" FROM DUAL; //10/23/2020
60)SELECT LAST_DAY('10/22/2020') "LAST DAY OF MONTH" FROM DUAL;    //10/31/2020
61)SELECT DEPTNO,HIREDATE,MONTHS_BETWEEN(SYSDATE,HIREDATE) "MONTHS EMPLOYED",ADD_MONTHS(HIREDATE,6) "6 MONTHS REVIEW",NEXT_DAY(HIREDATE,'FRIDAY') "FIRST FRIDAY",LAST_DAY(HIREDATE) "LAST DAY OF MONTH" FROM EMP;
62)SELECT ROUND(SYSDATE,'MONTH') ROUNDED FROM DUAL;                //10/23/2020-->11/01/2020
   SELECT HIREDATE,ROUND(HIREDATE,'MONTH') ROUNDED FROM EMP;       //CHECK DATE GREATER THAN 15 THEN NEXT MONTH
63)SELECT ROUND(SYSDATE,'YEAR') ROUNDED FROM DUAL;                 //10/23/2020-->01/01/2021
   SELECT HIREDATE,ROUND(HIREDATE,'YEAR') ROUNDED FROM EMP;        //CHECK MONTH GREATER THAN 6 THEN NEXT YEAR
64)SELECT TRUNC(SYSDATE,'MONTH') TRUNCATED FROM DUAL;              //10/23/2020-->10/01/2020
   SELECT HIREDATE,TRUNC(HIREDATE,'MONTH') TRUNCATED FROM EMP;     //US MAHEENA KI PAHLI
65)SELECT TRUNC(SYSDATE,'YEAR') TRUNCATED FROM DUAL;               //10/23/2020-->01/01/2020
   SELECT HIREDATE,TRUNC(HIREDATE,'YEAR') TRUNCATED FROM EMP;      //US SAL KI PAHLI
               
------------------------------------SQL 4------------------------------------
1) SELECT SYSDATE, TO_CHAR(SYSDATE,'HH12:MI:SS PM') AS TIME FROM DUAL;    //10/23/2020	01:58:00PM
2) SELECT SYSDATE, TO_CHAR(SYSDATE,'HH24:MI:SS AM') AS TIME FROM DUAL;    //10/23/2020	13:59:08PM
3) SELECT SYSDATE, TO_CHAR(SYSDATE,'FMDD "of" Month') AS "DATE" FROM DUAL; //23 of October  SHOULD USE "" WITH AS HERE BECUASE DATE IS KEYWORD.
4) SELECT HIREDATE, TO_CHAR(HIREDATE,'ddspth "of" Month YYYY') AS "DATE" FROM EMP;  //seventeenth of December 1980
5) SELECT ENAME, TO_CHAR(HIREDATE,'FMDD Month YYYY') AS "HIREDATE" FROM EMP;  //USE FM TO REMOVE LEADING ZEROS  1/9/2020.
6) SELECT ENAME, TO_CHAR(HIREDATE,'Ddspth "of" Month, YYYY HH12:MI:SS AM') AS "HIREDATE" FROM EMP;
7) SELECT ENAME, TO_CHAR(SAL,'$99,999') AS SALARY FROM EMP WHERE LOWER(ENAME)='scott'; 
8) SELECT HIREDATE, TO_CHAR(HIREDATE,'ddspth "of" Month YYYY HH12:MI:SS AM') AS "DATE WITH TIME" FROM EMP;
9) SELECT HIREDATE, TO_CHAR(HIREDATE,'Ddspth "of" Month YYYY HH12:MI:SS PM') AS "DATE WITH TIME" FROM EMP;
10)SELECT ENAME, HIREDATE FROM EMP WHERE HIREDATE=TO_DATE('February 22, 1981','MM/DD/YYYY');
   SELECT ENAME, HIREDATE FROM EMP WHERE HIREDATE='02/22/1981';
11)SELECT HIREDATE, TO_CHAR( NEXT_DAY( ADD_MONTHS(HIREDATE,6),'FRIDAY'),'Day, Month FMDdTH, YYYY') AS "DATE" FROM EMP;
12)SELECT ENAME, SAL, COMM ,(SAL*12)+NVL(COMM,0) ANNSAL FROM EMP;                //NVL(E1,O) CHECK E1
13)SELECT ENAME, SAL, COMM, (SAL*12)+NVL2(COMM,COMM,0) AS ANNSAL FROM EMP;       //NVL2(E1,E2,E3) CHECK E1
14)SELECT ENAME, JOB, NULLIF(LENGTH(ENAME),LENGTH(JOB)) AS "NULLIF" FROM EMP;    // NULL(-) if true else LENGTH(ENAME) of first one
15)SELECT ENAME, SAL, COMM, SAL+COMM, NULLIF(SAL,SAL+COMM) FROM EMP;
16)
SELECT ENAME, SAL, JOB,
CASE JOB   WHEN 'CLERK' THEN 1.10*SAL
           WHEN 'SALESMAN' THEN 1.15*SAL
           WHEN 'MANAGER' THEN 1.20*SAL
           ELSE SAL
END  AS    "REVISED_SALARY"
FROM EMP;
17)
SELECT ENAME,JOB,SAL,
DECODE(JOB, 'ANALYST', SAL*1.1,
            'CLERK',   SAL*1.15,
            'MANAGER', SAL*1.20,
                       SAL
      )
      REVISED_SALARY
FROM EMP;
18)
SELECT ENAME,SAL,
DECODE(TRUNC(SAL/1000, 0), 0, 0.00,
    		           1, 0.09,
                           2, 0.20,
                           3, 0.30,
                           4, 0.40,
                           5, 0.42,
                           6, 0.44,
                              0.45
       ) 
       TAX_RATE                                 
FROM EMP
WHERE DEPTNO=30;
19)
SELECT ENAME,SAL,DEPTNO,
CASE  WHEN SAL<1000 THEN 'LOW'
      WHEN SAL BETWEEN 1000 AND 3000 THEN 'MEDIUM'
      WHEN SAL>3000 THEN 'HIGH'
      ELSE 'N/A'
END AS "SAL_STATUS"
FROM EMP
ORDER BY ENAME;
20)
SELECT ENAME, EMPNO, DEPTNO,
DECODE(DEPTNO,10,'Acountiong',
              20,'Research',
              30,'Sales',
              40,'Operations',
                 'Unknown'
      )
      DEPARTMENT
FROM EMP
ORDER BY ENAME;
21)SELECT ENAME, NVL(TO_CHAR(MGR),'No Manager') MANAGER FROM EMP; //NESTED
   SELECT ENAME, NVL(MGR,0) MANAGER FROM EMP;

------------------------------------SQL 5 and 6------------------------------------
MIN(SAL),MAX(SAL),AVG(SAL),SUM(SAL)
//Multiple row function(Group functions)
1) SELECT MAX(SAL) MAX FROM EMP;           //5000
2) SELECT MIN(SAL) MIN FROM EMP;           //800
3) SELECT AVG(SAL) AVG FROM EMP;           //2073
4) SELECT SUM(SAL) SUM FROM EMP;           //29025
// CAN USE MIN AND MAX WITH ANY DATATYPE.
// CAN USE SUM AND AVG ONLY WITH NUMERIC DATATYPE.
   SELECT MIN(ENAME) FROM EMP;
5) SELECT MIN(HIREDATE), MAX(HIREDATE) FROM EMP;     //12/17/1980	01/12/1983
6) SELECT MAX(SAL),MIN(SAL),AVG(SAL),SUM(SAL) FROM EMP WHERE JOB LIKE 'SALES%';  //1600 1250 1400 5600
7) SELECT COUNT(*) FROM EMP WHERE DEPTNO=30;     //6  COUNT NULL AS WELL
///////////////////////////////////////////////////////////ALL FUNC EXCEPT COUNT(*) ignaore NULL///////////////////////////////////////////////////////////
   SELECT COUNT(*) FROM EMP WHERE COMM!=0;       //3 IGNORE NULL(VIP)
8) SELECT COUNT(COMM) FROM EMP WHERE DEPTNO=30;  //4 EXP COUNT IGNORE NULL
9) SELECT COUNT(DISTINCT DEPTNO) FROM EMP;       //3
   SELECT COUNT(DISTINCT COMM) FROM EMP;         //4 IGNORE NULL
10)SELECT AVG(COMM) FROM EMP;                    //550 IGNORE NULL
11)SELECT AVG(NVL(COMM,0)) FROM EMP;             //157.143 REPLACE 0 WITH NULL
   //GROUP BY CLAUSE
12)SELECT DEPTNO,AVG(SAL) FROM EMP GROUP BY DEPTNO;     //30	1566.6667
   //ALL NON-GROUP FUNC ATTRIBUTRE IN GROUP BY CLAUSE   //20	2175
                                                        //10	2916.6667
13)SELECT AVG(SAL) FROM EMP GROUP BY DEPTNO;            //SAME AVG(SAL) OUTPUT AS ABOVE.
14)SELECT DEPTNO,JOB,SUM(SAL) FROM EMP GROUP BY DEPTNO,JOB; //ORDER BY DEPTNO,JOB;//must use group by her
   (ERROR) SELECT DEPTNO,COUNT(ENAME) FROM EMP;//MISSING GROUP BY
SOL:SELECT DEPTNO,COUNT(ENAME) FROM EMP GROUP BY DEPTNO;
15)(ERROR)SELECT DEPTNO,AVG(SAL) FROM EMP WHERE AVG(SAL)>2000 GROUP BY DEPTNO;   //CAN'T USE WHERE WITH GEROUP FUNC.
SOL:SELECT DEPTNO,AVG(SAL) FROM EMP HAVING AVG(SAL)>2000 GROUP BY DEPTNO;
16)SELECT DEPTNO,MAX(SAL) FROM EMP GROUP BY DEPTNO HAVING MAX(SAL)>2900;
17)SELECT JOB,SUM(SAL) PAYROLL
   FROM EMP
   WHERE JOB NOT LIKE 'SALES%'
   GROUP BY JOB
   HAVING SUM(SAL)>5000
   ORDER BY SUM(SAL);
/* OUTPUT
JOB	  PAYROLL
ANALYST	  6000
MANAGER	  8275
*/
18)SELECT ROUND(MAX(AVG(SAL)),4) FROM EMP GROUP BY DEPTNO;       //2916.6667

////////////SUBQUERIES//////////////
Do not add an ORDER BY clause to a subquery.
Use single-row operators with single-row subqueries.
Use multiple-row operators with multiple-row subqueries.

19)SELECT ENAME,SAL FROM EMP
   WHERE SAL>(SELECT SAL FROM EMP WHERE ENAME='JONES');
/*
ENAME	SAL
SCOTT	3000
KING	5000
FORD	3000
*/
20)SELECT ENAME,SAL FROM EMP 
   WHERE SAL>(SELECT SAL FROM EMP WHERE EMPNO=7566);
/*
ENAME	SAL
SCOTT	3000
KING	5000
FORD	3000
*/
21)SELECT ENAME,JOB,SAL FROM EMP
   WHERE JOB=(SELECT JOB FROM EMP WHERE EMPNO=7369)
   AND SAL>(SELECT SAL FROM EMP WHERE EMPNO=7876);
/*
ENAME	JOB	SAL
MILLER	CLERK	1300
*/
22)SELECT ENAME,JOB,SAL FROM EMP
   WHERE SAL=(SELECT MIN(SAL) FROM EMP);
/*
ENAME	JOB	SAL
SMITH	CLERK	800
*/
23)SELECT DEPTNO,MIN(SAL) FROM EMP
   GROUP BY DEPTNO
   HAVING MIN(SAL)>(SELECT MIN(SAL) FROM EMP WHERE DEPTNO=20);  
/*
DEPTNO	MIN(SAL)
30	950
10	1300
*/
24)SELECT EMPNO,ENAME FROM EMP
   WHERE SAL=(SELECT MIN(SAL) FROM EMP GROUP BY DEPTNO);  //ERROR USE IN HERE
//MULTIPLE ROW SUB-QURIES
   SELECT EMPNO,ENAME,FROM EMP
   WHERE SAL IN(SELECT MIN(SAL) FROM EMP GROUP BY DEPTNO);
25)SELECT EMPNO,ENAME,JOB,SAL,DEPTNO
   FROM EMP
   WHERE SAL <ANY(800,950,1300);
/*
EMPNO	ENAME	JOB		SAL	DEPTNO
7369	SMITH	CLERK		800	20
7521	WARD	SALESMAN	1250	30
7654	MARTIN	SALESMAN	1250	30
7876	ADAMS	CLERK		1100	20
7900	JAMES	CLERK		950	30
*/
26)SELECT EMPNO,ENAME,JOB,SAL,DEPTNO
   FROM EMP
   WHERE SAL <ALL(1270,1250,1300);
/*
EMPNO	ENAME	JOB	SAL	DEPTNO
7369	SMITH	CLERK	800	20
7876	ADAMS	CLERK	1100	20
7900	JAMES	CLERK	950	30
*/
27)SELECT EMPNO,ENAME,JOB,SAL
   FROM EMP
   WHERE SAL<ANY(SELECT SAL FROM EMP WHERE JOB='CLERK')
   AND JOB<>'CLERK';
/*
EMPNO	ENAME	JOB		SAL
7521	WARD	SALESMAN	1250
7654	MARTIN	SALESMAN	1250
*/
28)SELECT EMPNO,ENAME,JOB,SAL
   FROM EMP
   WHERE SAL>ALL(SELECT AVG(SAL) FROM EMP GROUP BY DEPTNO);
/*
EMPNO	ENAME	JOB		SAL
7566	JONES	MANAGER		2975
7788	SCOTT	ANALYST		3000
7902	FORD	ANALYST		3000
7839	KING	PRESIDENT	5000
*/
29)SELECT EMPNO,ENAME,JOB,SAL
   FROM EMP
   WHERE SAL<ALL(SELECT AVG(SAL) FROM EMP GROUP BY DEPTNO);
/*
EMPNO	ENAME	JOB		SAL
7844	TURNER	SALESMAN	1500
7934	MILLER	CLERK		1300
7521	WARD	SALESMAN	1250
7654	MARTIN	SALESMAN	1250
7876	ADAMS	CLERK		1100
7900	JAMES	CLERK		950
7369	SMITH	CLERK		800
*/
//MULTIPLE COLUMN SUB-QUERIES
30)SELECT DEPTNO,ENAME,SAL FROM EMP
   WHERE (DEPTNO,SAL) IN(SELECT DEPTNO,MIN(SAL) FROM EMP GROUP BY DEPTNO);
/*
DEPTNO	ENAME	SAL
30	JAMES	950
20	SMITH	800
10	MILLER	1300
*/
	   SQL 7
//CARTECIAN PRODUCT(croos product)(croos join)
1) SELECT * FROM EMP,DEPT;
2) SELECT EMP.EMPNO,EMP.ENAME,EMP.DEPTNO,DEPT.LOC
   FROM EMP, DEPT;
//14*4=56 ROWS, 8+3=11 COLUMNS.

//EQUIJOIN(INNER JOIN)(NATURAL JOIN)
1) SELECT EMP.EMPNO,EMP.ENAME,EMP.DEPTNO,DEPT.DEPTNO,DEPT.LOC
   FROM EMP,DEPT
   WHERE EMP.DEPTNO=DEPT.DEPTNO;
2) SELECT EMP.EMPNO,EMP.ENAME,EMP.DEPTNO,DEPT.LOC
   FROM EMP,DEPT
   WHERE EMP.DEPTNO=DEPT.DEPTNO;
3) SELECT EMP.EMPNO,EMP.ENAME,EMP.DEPTNO,DEPT.DEPTNO,DEPT.LOC
   FROM EMP INNER JOIN DEPT
   ON EMP.DEPTNO=DEPT.DEPTNO;           //USING ON CLAUSE
4) SELECT EMP.EMPNO,EMP.ENAME,EMP.DEPTNO,DEPT.LOC
   FROM EMP INNER JOIN DEPT
   ON EMP.DEPTNO=DEPT.DEPTNO;           //USING ON CLAUSE
        //USING AND CONDITION
Q) To display employee King’s employee number, name, department number, and department location?
5) SELECT EMP.EMPNO, EMP.ENAME, EMP.DEPTNO, DEPT.DEPTNO, DEPT.LOC
   FROM EMP, DEPT
   WHERE EMP.DEPTNO=DEPT.DEPTNO
   AND EMP.ENAME = 'KING';           //USING AND CONDITION
            0R
   SELECT EMP.EMPNO, EMP.ENAME, EMP.DEPTNO, DEPT.LOC
   FROM EMP INNER JOIN DEPT
   ON EMP.DEPTNO=DEPT.DEPTNO      //USING ON CLAUSE
   AND EMP.ENAME LIKE 'KING';     //USING AND CONDITION and LIKE
         //TABLE ALAISES  (make variable in from)
6) SELECT E.EMPNO, E.ENAME, E.DEPTNO, D.LOC
   FROM EMP E, DEPT D
   WHERE E.DEPTNO=D.DEPTNO
   AND E.ENAME LIKE 'KING';

//NON-EQUIJOIN(JOIN)
7) SELECT E.EMPNO, E.ENAME, E.SAL, S.GRADE
   FROM EMP E, SALGRADE S
   WHERE E.SAL BETWEEN S.LOSAL AND S.HISAL;
      OR
   SELECT E.EMPNO, E.ENAME, E.SAL, S.GRADE
   FROM EMP E JOIN SALGRADE S
   ON E.SAL BETWEEN S.LOSAL AND S.HISAL;

//OUTER JOIN              (DON'T USE IN and OR)
          //LEFT OUTER JOIN(+);
8) SELECT E.EMPNO,E.ENAME,E.DEPTNO,D.LOC
   FROM EMP E, DEPT D
   WHERE E.DEPTNO=D.DEPTNO(+);
      OR
   SELECT E.EMPNO,E.ENAME,E.DEPTNO,D.LOC
   FROM EMP E LEFT OUTER JOIN DEPT D
   ON E.DEPTNO=D.DEPTNO;
//IF NEW EMP IS ADDED BUT NOT ASSIGNED ANY DEPT THEN WE USE FOLLOWING
   SELECT E.EMPNO,E.ENAME,E.DEPTNO,D.LOC
   FROM EMP E LEFT OUTER JOIN DEPT D
   ON E.DEPTNO=D.DEPTNO
   ORDER BY E.DEPTNO;

          //RIGHT OUTER JOIN(+);
9) SELECT E.EMPNO,E.ENAME,E.DEPTNO,D.LOC
   FROM EMP E, DEPT D
   WHERE E.DEPTNO(+)=D.DEPTNO;
      OR
   SELECT E.EMPNO,E.ENAME,E.DEPTNO,D.LOC
   FROM EMP E RIGHT OUTER JOIN DEPT D
   ON E.DEPTNO=D.DEPTNO;
          //(+)LEFT and RIGHT OUTER JOIN(+);
10)(error)SELECT E.EMPNO,E.ENAME,E.DEPTNO,D.LOC
   FROM EMP E, DEPT D
   WHERE E.DEPTNO(+)=D.DEPTNO(+);     //CAN'T USE LEFT and RIGHT SIMULTANEOUSLY. 
11)SELECT E.EMPNO,E.ENAME,E.DEPTNO,D.LOC
   FROM EMP E, DEPT D
   WHERE E.DEPTNO(+)=D.DEPTNO;
12)SELECT E.EMPNO,E.ENAME,E.DEPTNO,D.LOC
   FROM EMP E, DEPT D
   WHERE E.DEPTNO(+)=D.DEPTNO;
   UNION
   SELECT E.EMPNO,E.ENAME,E.DEPTNO,D.LOC
   FROM EMP E, DEPT D
   WHERE E.DEPTNO=D.DEPTNO(+);           //RETURN RIGHT
13)SELECT E.EMPNO,E.ENAME,E.DEPTNO,D.LOC
   FROM EMP E, DEPT D
   WHERE E.DEPTNO(+)=D.DEPTNO
   INTERSECT
   SELECT E.EMPNO,E.ENAME,E.DEPTNO,D.LOC
   FROM EMP E, DEPT D
   WHERE E.DEPTNO=D.DEPTNO(+);           //RETURN LEFT
14)SELECT E.EMPNO,E.ENAME,E.DEPTNO,D.LOC
   FROM EMP E, DEPT D
   WHERE E.DEPTNO(+)=D.DEPTNO
   MINUS
   SELECT E.EMPNO,E.ENAME,E.DEPTNO,D.LOC
   FROM EMP E, DEPT D
   WHERE E.DEPTNO=D.DEPTNO(+);           //RETURN RIGHT-LEFT   (1 row)
//SELF JOIN
15)SELECT WORKER.EMPNO, WORKER.ENAME, MANAGER.MGR
   FROM EMP WORKER, EMP MANAGER
   WHERE WORKER.MGR=MANAGER.EMPNO;
16)SELECT WORKER.ENAME||' works for '||MANAGER.ENAME
   FROM EMP WORKER, EMP MANAGER
   WHERE WORKER.MGR=MANAGER.EMPNO;
/*REASON
EMP (WORKER)                  EMP (MANAGER)
EMPNO	ENAME	 MGR          EMPNO	ENAME
-----	------	----          -----	--------
 7839	KING	 -
 7698	BLAKE	7839          7839	KING
 7782	CLARK	7839          7839	KING
 7566	JONES	7839          7839	KING          
 7654	MARTIN	7698          7698      BLAKE
 7499	ALLEN	7698          7698      BLAKE
                  |_____________|
*/
OR
SELECT E1.ENAME||' is manager of '||E2.ENAME
FROM EMP E1,EMP E2
WHERE E1.EMPNO=E2.MGR;
OR
SELECT E1.ENAME EMP,E2.ENAME MANAGER
FROM EMP E1,EMP E2
WHERE E1.MGR=E2.EMPNO;

------------------------------------SQL 8------------------------------------
//MANIPULATING DATA (DML)
//////////////////////////INSERT STATEMENT///////////////////////////////////////////////
1) INSERT INTO DEPT(DEPTNO,DNAME,LOC)          //DELETE FROM DEPT
   VALUES (50,'DEVELOPMENT','DETROIT');        //WHERE DEPTNO=50;
       OR
   INSERT INTO DEPT
   VALUES (50,'DEVELOPMENT','DETROIT');
      //INSERT WITH NULL
      //IMPLICITLY BY OMMITING COLUMN
2) INSERT INTO DEPT(DEPTNO,DNAME)
   VALUES (50, 'MIS');
      //EXPLICITLY BY WRITING NULL
3) INSERT INTO DEPT
   VALUES (50, 'MIS', NULL);
      //INSERTING DATE
4) INSERT INTO	EMP(EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM, DEPTNO)
   VALUES (7196, 'GREEN', 'SALESMAN', 7782, SYSDATE, 2000, NULL,10);
5) INSERT INTO	EMP(EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM, DEPTNO)
   VALUES (7196, 'GREEN', 'SALESMAN', 7782, TO_DATE('FEB 03, 1997', 'MON DD, YYYY'), 2000, NULL,10);
6) INSERT INTO MANAGERS(ID, NAME, SALARY, HIREDATE)
      SELECT EMPNO, ENAME, SAL, HIREDATE     //Don't use values
      FROM EMP                     
      WHERE JOB = 'MANAGER';      //Managers does not exist
7.)INSERT INTO DEPARTMENT(D_ID,D_NAME,M_ID)    //DEFAULT CREATED DURING CREATION
   VALUES(300,'ENGINEERING',DEFAULT);

//MULTIPLE ROWS INSERTED
7) INSERT ALL 
   INTO emp
   VALUES (2293,'AROMANO','SALESMAN',7782, TO_DATE('FEB 3, 97', 'MM/DD/YYYY'), 1300, NULL, 10)
   INTO emp
   VALUES (2294,'AROMANO','SALESMAN',7782,TO_DATE('FEB 3, 97', 'MM/DD/YYYY'), 1300, NULL, 10)
   SELECT * FROM DUAL;

////////////////////////////////////UPDATE////////////////////////////////////////
7) UPDATE EMP
   SET DEPTNO=20
   WHERE EMPNO=7782;     //1 ROW UPDATED
8) UPDATE EMP
   SET DEPTNO=20;        //14 ROW UPDATED
9) UPDATE emp            //Update employee 7698’s job and department to match that of employee 7499
   SET (job, deptno) = (SELECT job, deptno FROM emp WHERE empno = 7499)
   WHERE empno = 7698;
10)UPDATE employee
   SET deptno = (SELECT deptno FROM emp WHERE empno = 7788)
   WHERE job = (SELECT job FROM	emp WHERE empno = 7788);    //2 ROWS UPDATED
11)UPDATE EMP
   SET DEPTNO=55
   WHERE DEPTNO=20;   //CAN'T SET 55 VIOLATE INTEGRITY CONSTRAINT SEQUENCE IS 10,20,30,40,50 NOT 55 
12)UPDATE DEPARTMENT
   SET M_ID=DEFAULT 
   WHERE D_ID=10;

//////////////////////////////////////////DELETE////////////////////////////////////////////////
13)DELETE FROM DEPT
   WHERE DEPTNO = 50;   //1 ROW DELETED
14)DELETE FROM DEPT;   //4(ALL) ROWS DELETED
15)DELETE FROM EMP
   WHERE DEPTNO = (SELECT DEPTNO FROM DEPT WHERE DNAME = 'SALES'); 
16)DELETE FROM DEPT
   WHERE DEPTNO = 10;   //CAN'T DO THAT
17)TRUNCATE TABLE EMP;  //SAME AS DELETE AND REMOVE MEMORY OF TABLE AS WEL and can't rollback.


------------------------------------SQL 9------------------------------------
//////////////////////////////////////////////CREATE///////////////////////////////////////////////
1) CREATE TABLE DEPT
   (
	DEPTNO NUMBER(2),
	DNAME VARCHAR(14),
	LOC VARCHAR(13)
   );
2) DESCRIBE DEPT;     //TO CHECK

//DEFAULT OPTION
3) CREATE TABLE TEST
   (ID NUMBER(2),
    VALUES NUMBER(2) DEFAULT 50,  //BY DEFAULT 50 WILL BE GIVEN AT THE TIME OF CREATION.  --COLUMN LEVEL
    NAME VARCHAR(13));            //JUST LIKE A IN CMS

//QUERYING DATA DICTIONARY 
4) SELECT * FROM USER_TABLES;   //TABLE OWN BY USER
5) SELECT DISTINCT OBJECT_TYPE FROM USER_OBJECTS;   //OBJECT TYPE BY USER(SYS)
6) SELECT * FROM USER_CATALOG;   //VIEW TABLE, SYNONYMS, SEQUENCE BY USER(SYS)
7) SELECT constraint_name, constraint_type, search_condition FROM user_constraints WHERE table_name = 'EMP';
8) SELECT constraint_name, column_name FROM user_cons_columns WHERE table_name = 'EMP';
   SELECT SEQUENCE_NAME,MIN_VALUE,MAX_VALUE,INCREMENT_BY,LAST_NUMBER FROM USER_SEQUENCES;
   DESCRIBE ALL_USERS;
   SELECT ic.index_name, ic.column_name,
          ic.column_position col_pos,ix.uniqueness
    FROM  user_indexes ix, user_ind_columns ic
    WHERE ic.index_name = ix.index_name
    AND	  ic.table_name = 'EMP';

 
//CONSTRAINTS
(1) COL LEVEL(C)
(2) TABLE LEVEL(T)

DEFAULT(C)          //MAAM KI SLIDES KA MUTABIK
NOT NULL(C)
UNIQUE(C,T)
PRIMARY KEY(C,T)
FOREIGN KEY(C,T)
CHECK (C)


7) CREATE TABLE EMP
(
	EMPNO NUMBER(4),
	ENAME VARCHAR(10),
	.....
	DEPTNO NUMBER(7,2) NOT NULL,
	CONSTRAINT EMP_EMPNO_PK PRIMARY KEY(EMPNO)
);

//NOT NULL
8)CREATE TABLE EMP
(                  EMPNO NUMBER(4),
		   ENAME VARCHAR(10) NOT NULL,
		   JOB VARCHAR(19),
		   MGR NUMBER(4);
		   HIREDATE DATE,
		   SAL NUMBER(7,2),
   		   COMM NUMBER(7,2),
		   DEPTNO NUMBER(7,2) NOT NULL
);

//UNIQUE KEY CONSTRAINT
9) CREATE TABLE DEPT
(
DEPTNO NUMBER(2),
DNAME VARCHAR(14), //UNIQUE(C)
LOC VARCHAR(13),
CONSTRAINT DEPT_DNAME_UK UNIQUE(DNAME)
);   //UNIQUE(C,T)

//PRIMARY KEY
10)CREATE TABLE DEPT
(
		     	DEPTNO NUMBER(2),  //PRIMARY//(C)
			DNAME VARCHAR(14), //UNIQUE//(C)
			LOC VARCHAR(13),
			CONSTRAINT DEPT_DNAME_UK UNIQUE(DNAME),   //UNIQUE(C,T)
			CONSTRAINT DEPT_DEPTNO_PK PRIMARY KEY(DEPTNO) //PRIMARY(C,T)
);



//FOREIGN KEY
11)CREATE TABLE EMP
(
                   EMPNO NUMBER(4),
		   ENAME VARCHAR(10) NOT NULL,
		   JOB VARCHAR(19),
		   MGR NUMBER(4);
		   HIREDATE DATE,
		   SAL NUMBER(7,2),
   		   COMM NUMBER(7,2),
		   DEPTNO NUMBER(7,2) NOT NULL,
                   CONSTRAINT EMP_EMPNO_PK PRIMARY KEY(EMPNO),
                   CONSTRAINT EMP_DEPTNO_FK FOREIGN KEY(DEPTNO) REFERENCES DEPT(DEPTNO)
);

//CHECK CONSTRAINT
12)CREATE TABLE EMP
(
                   EMPNO NUMBER(4),
		   ENAME VARCHAR(10) NOT NULL,
		   JOB VARCHAR(19),
		   MGR NUMBER(4);
		   HIREDATE DATE,
		   SAL NUMBER(7,2),
   		   COMM NUMBER(7,2),
		   DEPTNO NUMBER(7,2) NOT NULL),
                   CONSTRAINT EMP_DEPTNO_CK CHECK(DEPTNO BETWEEN 10 AND 99)
);


///////////////VIEWING CONSTRAINTS//////////////
13)SELECT constraint_name, constraint_type,
   search_condition
   FROM user_constraints
   WHERE table_name = 'EMP';
///////////////VIEWING COLUMN ASSOCIATED WITH CONSTRAINTS////////////////
14)SELECT constraint_name, column_name
   FROM user_cons_columns
   WHERE table_name = 'EMP';
//////////////Creating a Table by Using a Subquery//////////////
15)SQL> CREATE TABLE dept30
   AS
	SELECT empno, ename, sal*12 ANNSAL,
	hiredate
 	FROM emp
 	WHERE deptno = 30;



////////////////////////////////////////ALTER///////////////////////////////////////////////////

ALTER TABLE EMPLOYEESIT19
ADD (COMMISSION NUMBER(2,2) CHECK(COMMISSION > 0)); //COLUMN LEVEL CONSTRAINT CHECK WITH ADDING ATTRIBUTE.

ALTER TABLE EMPLOYEESIT19 
ADD CONSTRAINT my_emp_id_pk PRIMARY KEY(ID);        //CONSTRAINT ADDED         

16)
ALTER TABLE dept30
ADD(job VARCHAR2(9));                               //COLUMN ADDED

17)
ALTER TABLE dept30
MODIFY(ename VARCHAR2(15));                         //DATATYPE MODIFIED

18)
ALTER TABLE dept30
DROP COLUMN Job;                                    //COLUMN DROPED

19)
ALTER TABLE dept30
RENAME COLUMN Job TO Designation;                   //COLUMN RENAMED

20)
ALTER TABLE EMPLOYEESIT19 
ADD CONSTRAINT my_empid_pk PRIMARY KEY(ID);         //CONSTRAINT ADDED

21)
ALTER TABLE emp
ADD CONSTRAINT emp_detno_fk FOREIGN KEY(deptno) 
REFERENCES dept(deptno);                            //CONSTRAINT ADDED

22)
ALTER TABLE EMPLOYEESIT19
ADD(COMMISSION NUMBER(2,2) CHECK (COMMISSION > 0)); //COLUMN ADDED WITH CONSTRAINT

ALTER TABLE CLASS
ADD CHECK (ROOMNUM<20);                             //CONSTRAINT ADDED

23)
ALTER TABL emp
DROP CONSTRAINT emp_empno_pk;                       //CONSTRAINT DROPED                           //IF NOT FOREIGN

24)
ALTER TABLE dept
DROP PRIMARY KEY CASCADE;                            //DEPT(PK) AND EMP(FK) CONSTRAINTS DROPED   //IF FOREIGN

25)
ALTER TABLE student
ALTER COLUMN program DROP DEFAULT;                   //DEFAULT CONSTRAINT DROPED                 //

26)
ALTER TABLE emp
DISABLE CONSTRAINT emp_empno_pk CASCADE;              //CONSTRAINT DISABLED                     //

27)
ALTER TABLE emp
ENABLE CONSTRAINT emp_empno_pk;                       //CONSTRAINT ENABLED                      //

////////////////////////////////////////RENAME////////////////////////////////////////////////

28) RENAME dept TO department;                        //OBJECT RENAMED

////////////////////////////////////////DROP//////////////////////////////////////////////////

29) DROP TABLE DEPT;                                  //OBECT DROPED

30) DROP TABLE DEPT CASCADE CONSTRAINT;               //IF DEPT(PK) AND EMP(FK).........ETC.



What are views?
->	A view is a subset of a database that is generated from a query and stored as a permanent object.
->	Views represent a subset of the data contained in a table.
->	They can join and simplify multiple tables into one virtual table.
->	They take up very little storage space because the database contains only the view definition, not the data.
->	They can provide results for different calculations (like sum and average) along with the stored data, and can limit the degree to which tables are exposed to the outer world.
Why we use views?
->	Views are used to implement the security mechanism in SQL Server.
->	Views are generally used to restrict the user from viewing certain columns and rows. 
->	Views display only the data specified in the query, so it shows only the data that is returned by the query defined during the creation of the view.


------------------------------------SQL 10------------------------------------
define view(virtual table)?
Create view(no ORDER BY in subquery)
  CREATE [OR REPLACE] VIEW view
  [(alias[, alias]...)]
  AS subquery
  [WITH CHECK OPTION]
  [WITH READ ONLY]
Retrieve data from view
MODIFY VIEW (CREATE OR REPLACE AND ADD ALIAS TO EACH COLUMN)
Insert, update, and delete data from view
Alter the definition of a view
Drop a view (DROP VIEW DEPT10;)

////////////////////////////////SIMPLE VIEW///////////////////////////////////
//////////////////////////////////CREATE//////////////////////////////////////
1) CREATE VIEW DEPT10  //(EMP# ,EMP_NAME ,JOB,MANAGER,HIREDATE,SALARY,COMMISION,DEPT#)
   AS SELECT * FROM EMP WHERE DEPTNO=10;

   DESCRIBE DEPT10;

2) CREATE VIEW DEPT10
   AS SELECT EMPNO EMP# ,ENAME EMP_NAME ,JOB,MGR MANAGER,HIREDATE,SAL SALARY,COMM COMMISION,DEPTNO DEPT# FROM EMP WHERE DEPTNO=10;  //TO CHANGE ALIAS.

/////////////////////////////RETRIEVING////////////////////////////////////////
3) SELECT * FROM DEPT10;
/////////////////////////////MODIFY////////////////////////////////////////////
4) CREATE OR REPLACE VIEW DEPT10(EMP# ,EMP_NAME ,JOB,MANAGER,HIREDATE,SALARY,COMMISION,DEPT#)  //TO CHANGE ALIAS
   AS SELECT * FROM EMP WHERE DEPTNO=10;
//////////////////////////////COMPLEX VIEW/////////////////////////////////////
5) CREATE OR REPLACE VIEW EMP_DEPT(NAME,MINSAL,MAXSAL,AVGSAL)
   AS SELECT D.DNAME,MIN(E.SAL),MAX(E.SAL),ROUND(AVG(E.SAL))
   FROM EMP E,DEPT D
   WHERE E.DEPTNO=D.DEPTNO
   GROUP BY D.DNAME;
///////////////////////////////DML/////////////////////////////////////////////
   CAN DO ON SIMPLE VIEW
   CAN'T DO IF THERE ARE Group function,GROUP BY clause,DISTINCT keyword
//////////////////////////////CHECK OPTION/////////////////////////////////////
6) CREATE OR REPLACE VIEW DEPT10(EMP# ,EMP_NAME ,JOB,MANAGER,HIREDATE,SALARY,COMMISION,DEPT#)
   AS SELECT * FROM EMP WHERE DEPTNO=10   //JO CONDITION MA WO SECURE HO JAE GA DEPTNO PK HA
   WITH CHECK OPTION;                     //CAN'T CHANGE DEPTNO.
///////////////////////////////READ ONLY///////////////////////////////////////
7) CREATE OR REPLACE VIEW DEPT10(EMP# ,EMP_NAME ,JOB,MANAGER,HIREDATE,SALARY,COMMISION,DEPT#)
   AS SELECT * FROM EMP WHERE DEPTNO=10
   WITH READ ONLY;      //CAN'T CHANGE ANY DATA.
////////////////////////////////DROP//////////////////////////////////////////
8) DROP VIEW DEPT10;


------------------------------------SQL 11------------------------------------
/////////////////////////////OTHER DATABASE OBJECTS///////////////////////////
////////////////////////////////SEQUENCE//////////////////////////////////////
1) CREATE SEQUENCE sequence
	[INCREMENT BY n]
	[START WITH n]     (OF 1-28 CHAR)
	[{MAXVALUE n | NOMAXVALUE}] (10^27-1)
	[{MINVALUE n | NOMINVALUE}] (1)
	[{CYCLE | NOCYCLE}]
	[{CACHE n | NOCACHE}]; (MIN IS 2, DEFAULT IS 20)
2) CREATE SEQUENCE DEPT_DEPTNO
	INCREMENT BY 10
	START WITH 10
	MAXVALUE 500
	NOCACHE
	NOCYCLE;
3) SELECT SEQUENCE_NAME,MIN_VALUE,MAX_VALUE,INCREMENT_BY,LAST_NUMBER FROM USER_SEQUENCES;
4) INSERT INTO DEPT
   VALUES(DEPT_DEPTNO.NEXTVAL,'MARKETING','LAHORE');
5) SELECT  DEPT_DEPTNO.CURRVAL FROM DUAL;
//////////////////////////MODIFY(ALTER)////////////////////////////////////////
3) ALTER SEQUENCE DEPT_DEPTNO     //NO START WITH
	INCREMENT BY 10
	MAXVALUE 1000
	NOCACHE
	NOCYCLE;
/////////////////////////DROP//////////////////////////////////////////////////
7) DROP SEQUENCE DEPT_DEPTNO;

//////////////////////////////INDEX////////////////////////////////////////////
8) CREATE INDEX EMP_ENAME_IDX
   ON EMP(ENAME);
9) CREATE UNIQUE INDEX EMP_ENAME_IDX
   ON EMP(ENAME);
10)SELECT ic.index_name, ic.column_name,
          ic.column_position col_pos,ix.uniqueness
    FROM  user_indexes ix, user_ind_columns ic
    WHERE ic.index_name = ix.index_name
    AND	  ic.table_name = 'EMP';
11)DROP INDEX EMP_ENAME_IDX;

///////////////////////////SYNONYM//////////////////////////////////////////////
12)CREATE SYNONYM D10
   FOR DEPT10;
13)DROP SYNONYM D10; 

------------------------------------SQL 12------------------------------------
1) CREATE USER USERNANE
   IDENTIFIED BY PASSWORD;
OR
   CREATE USER HUSSAIN
   IDENTIFIED BY BHAIJAN;
2) CONNECT;      //TO LOG IN
3) ALTER USER HUSSAIN
   IDENTIFIED BY BHAISHB;  //PASSWORD CHANGED
4) DESCRIBE ALL_USERS;
5) SELECT * FROM ALL_USERS;
///////////////////////////////////SYSTEM PRIVILEGES/////////////////////////////////////////////
6) GRANT CREATE TABLE, CREATE SEQUENCE, CREATE VIEW, CREATE INDEX, CREATE PROCEDURE TO HUSSAIN;
7) GRANT MANAGER TO HUSSAIN
      [WITH ADMIN OPTION];          //can grant roles to other users now.
8) CREATE ROLE MANAGER;
9) GRANT CREATE TABLE, CREATE SEQUENCE, CREATE VIEW, CREATE INDEX, CREATE PROCEDURE TO MANAGER;
10)GRANT MANAGER TO HUSSAIN, HASSAN;      //GRANT ROLE TO USER;
11)GRANT CONNECT TO MANAGER;
12)REVOKE MANAGER FROM HASSAN;
13)REVOKE CREATE TABLE FROM MANAGER;
14)REVOKE CONNECT FROM MANAGER;
///////////////////////////////////OBJECT PRIVILEGES/////////////////////////////////////////////
15)GRANT SELECT,INSERT,UPDATE(DEPTNO,SAL),DELETE    //TO UPDATE SPECIFIC COLUMNS
   ON EMP
   TO MANAGER;
16)REVOKE ALL
   ON EMP
   FROM MANAGER

------------------------------------SQL 13------------------------------------
///////////////////////////////SQL PLUS/////////////////////////////////
STEPS:
1)
OPEN CMD
2)
SQL> SQLPLUS [ENTER]
3)
Enter user-name: SYS AS SYSDBA
Enter password: *****    [ENTER]
4) SELECT * FROM DUAL;   //IF ERROR
5)
SELECT USERNAME, ACCOUNT_STATUS FROM DBA_USERS ORDER BY USERNAME;
6) OPEN LOCKED HR OR ANY USER OR GRANT ACCESS.   //HR                             EXPIRED & LOCKED
   ALTER USER HR ACCOUNT UNLOCK;
User altered.
7) NOW CHANGE PASSWORD.
    ALTER USER HR IDENTIFIED BY 51214;
User altered.
8)
SQL> CONNECT HR;
Enter password: *****
Connected.
9)
SHOW USER;
USER is "HR"
10)SELECT OWNER, TABLE_NAME FROM ALL_TABLES;
11)SELECT * FROM COUNTRIES;     //OWNED BY "HR"
12)SQL> DISC
13)SQL> EXIT             //FOR NORMAL TERMINATION
14)CONNECT HASSAN;
   PASSWORD:51214
   SQL> SELECT * FROM EMP;   //TO GET TABLES.

//IN HASSAN                        |                  //IN SYS AS SYSDBA
SELECT * FROM DEPT;                |                  SELECT * FROM HASSAN.DEPT;
INSERT INTO DEPT                   |                  //AFTER COMMIT DATA OR NORMAL TERMINATION WILL BE SHOWED
VALUES(50,'IT','LAHORE');          |                  SELECT * FROM HASSAN.DEPT;
COMMIT;                            |
SAVEPOINT S1;                      |
SELECT * FROM DEPT;                |
INSERT INTO DEPT                   |
VALUES(60,'CS','KARACHI');         |
SELECT * FROM DEPT;                |
ROLLBACK TO S1; //COMMIT SA PAHLA  |
COOMMIT;                           |


------------------------------------SQL 14------------------------------------

PL/SQL (PROCEDURAL LANGUAGE/SQL)
/*
BASIC UNIT OF PL/SQL IS BLOCK. ALL PL/SQL PROGRAMS ARE MADE OFF BLOCKS. ONE BLOCK CAN BE NESTED OF OTHER.
STRUCTURE OF PL/SQL BLOCK:

DECLARE
	X NUMBER := 10;

BEGIN
DML statements such as  SELECT, INSERT, UPDATE, DELETE plus some transaction control. PL/SQL is not case sensitive.

EXCEPTION
END;
/
*/

DECLARE
	ID NUMBER;
	NAME VARCHAR;
BEGIN
	SELECT EMPNO,ENAME INTO ID,NAME FROM EMP WHERE EMPNO=7536;
	//GETTING VALUE FROM USER
	X NUMBER =&X;

EXCEPTION
END;
/


//TO KNOW DATATYPE
ID EMP.EMPNO%TYPE;

DECLARE
	X NUMBER := 10;

SET SERVEROUTPUT ON
BEGIN
	DBMS_OUTPUT.PUT_LINE('HELO WORLD');
END;
/

DECLARE
	a NUMBER := 3;
BEGIN
	a := a + 1;
	DBMS_OUTPUT.PUT_LINE ('a = ' || a);
END;
/

DECLARE 
	NUM  NUMBER := 2;
	CH CHAR := ’B’;
BEGIN
	INSERT INTO TEMP VALUES(NUM,CH); 
END;
/

DECLARE
	A NUMBER;
	B NUMBER;
	C NUMBER;
PROCEDURE FINDMIN(X IN NUMBER,Y IN NUMBER, Z OUT NUMBER) IS
BEGIN
	IF X<Y THEN
		Z:=X;
	ELSE
		Z:=Y;
	END IF;
END;
BEGIN
	A:=3;
	B:=6;
	FINDMIN(A,B,C);
	DBMS_OUTPUT.PUT_LINE('MINIMUM OF 3 AND 6: ' || C);
END;
/

DECLARE
	A NUMBER;
	B NUMBER;
	C NUMBER;
FUNCTION FINDMIN(X IN NUMBER,Y IN NUMBER) RETURN NUMBER IS Z NUMBER;
BEGIN
	IF X<Y THEN
		Z:=X;
	ELSE
		Z:=Y;
	END IF;
	RETURN Z;
END;
BEGIN
	A:=3;
	B:=6;
	C:=FINDMIN(A,B);
	DBMS_OUTPUT.PUT_LINE('MINIMUM OF 3 AND 6: ' || C);
END;
/

DECLARE
	X NUMBER;
	Y NUMBER;
BEGIN
	X := &X;
	Y := &Y;
	DBMS_OUTPUT.PUT_LINE(X+Y);
END;
/

DECLARE
	X NUMBER:=3;
	Y NUMBER:=4;
BEGIN
	X := &X;
	Y := &Y;
	DBMS_OUTPUT.PUT_LINE(X+Y);
END;
/















